### SET

##############################################################################
## ห้ามใส่ข้อมูลซ้ำกัน ไม่สามารถซ้ำกันได้ แก้ไขสมาชิกไม่ได้เพราะไม่มี index ในการอ้างอิง แต่เพิ่มจำนวนสมาชิกได้ ลำดับไม่แน่นอน
## union interception 

'''
List = [] , ข้อมูลต่างชนิดกัน แก้ไขสมาชิกข้อมูลได้ ข้อมูลซ้ำกันได้ ซ้ายไปขวา
Tuple = () , ข้อมูลต่างชนิดกัน แก้ไขสมาชิกไม่ได้ ข้อมูลซ้ำกันได้ ซ้ายไปขวา
Set = {} , ข้อมูลต่างชนิดกัน แก้ไขสมาชิกไม่ได้เพราะไม่มี index ในการอ้างอิง ขอมูลซ้ำกันไม่ได้ ลำดับไม่แน่นอน
'''

# สร้าง set แบบปกติ
fruit = {"มะม่วง","มะขาม","มะยม",50,True}
print("fruit => ",fruit)

# สร้าง set แบบ constructor 
# ถ้าข้อมูลซ้ำกันมันจะโชว์มาแค่ตัวเดียว
fish = set(["ปลาดุก","ปลาหมอ","ปลาดุก"]) 
print("fish => ",fish)
print(type(fish))

lis = ["หมา","แมว"]
pet = set(lis)
print("pet => ",pet)
print(type(pet))

# ช่วยแก้ปัญหา duplicate ข้อมูลได้ โดยโยน list ที่่อาจจะมีตัวซ้ำกันมาเยอะ มาใส่ใน set ช่วยกรองเอาตัวที่มันซ้ำกันออกไปได้

# เพิ่มข้อมูลสมาชิก
# เพิ่มทีละตัว
fruit.add("ทุเรียน")
fruit.add("สับปะรด")
fruit.add(999)
print("fruit หลังเพิ่มข้อมูล, เพิ่มทีละตัว => ",fruit)

# เพิ่มทีละหลายๆตัว
lis=["ตะไคร้","โหระพา","ชะอม"]
fruit.update(lis)
print("fruit หลังเพิ่มข้อมูล, เพิ่มสมาชิกหลายตัว => ",fruit)

# อีกวิธีนึง
fish.update(["ปลาโลมา","ปลาวาฬ"])
print("fish หลังเพิ่มข้อมูล, เพิ่มสมาชิกหลายตัว => ",fish)

##############################################################################